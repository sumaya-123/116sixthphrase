78. Subset Sum Problem


code:


def find_subset(weight: list, req_sum: int):
    l = len(weight)
    row = l
    col = req_sum + 1
    dp_array = [[0] * col for i in range(row)]

    for i in range(row):
        for j in range(1, col):
            # Row 0
            if i == 0:
                if j >= weight[i]:
                    dp_array[i][j] = weight[i]
                else:
                    continue
            else:
                if j - weight[i] >= 0:
                    dp_array[i][j] = max(dp_array[i - 1][j], (weight[i] + dp_array[i - 1][j - weight[i]]))
                elif j >= weight[i]:
                    dp_array[i][j] = max(dp_array[i - 1][j], weight[i])
                else:
                    dp_array[i][j] = dp_array[i - 1][j]
    row -= 1
    col -= 1
    sum_subset = []
    if dp_array[row][col] != req_sum:
        return None

    while col >= 0 and row >= 0 and req_sum > 0:
        if (row == 0):
            sum_subset.append(weight[row])
            break

        if (dp_array[row][col] != dp_array[row - 1][col]):
            sum_subset.append(weight[row])
            req_sum -= weight[row]
            col -= weight[row]
            row -= 1
        else:
            row -= 1

    return sum_subset

if __name__ == "__main__":
    array = list(map(int, input().split()))
    req_sum = int(input())

    array.sort()
    sum_subset = find_subset(array, req_sum)

    if sum_subset is None:
        print("Sum :", req_sum, "is not possible")
    else:
        print("Subset for sum", req_sum, ' :')
        print(' '.join(str(x) for x in sum_subset))

